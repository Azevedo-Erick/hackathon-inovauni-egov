@page "/Admin/Usuario/Listagem"
@using HackatonInovaUniEGov.Shared.Layouts
@using HackatonInovaUniEGov.Data
@using HackatonInovaUniEGov.Models
@using System.Linq.Dynamic.Core
@using Microsoft.EntityFrameworkCore
@layout AdminLayout
@inject ApplicationContext Context
@inject NavigationManager Navigation
@inject NotificationService NotificationService
@inject IDialogService DialogService
<div class="border rounded-lg p-4 flex flex-col shadow m-4">
    
<h3 class="text-center text-3xl inter-family my-4">Listagem de Usuários</h3>

 <RadzenButton class="ml-auto my-4" Variant="Radzen.Variant.Flat" Click=@(args => GoToForm()) Text="Novo" Icon="add" ButtonStyle="ButtonStyle.Success" />
<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
    Data="@Usuarios" TItem="Usuario" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
    <Columns>
        <RadzenDataGridColumn TItem="Usuario" Property="Id" Filterable="false" Title="ID" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="Usuario" Property="Nome" Title="Nome" Frozen="true" Sortable="false" Filterable="false" Width="80px" TextAlign="TextAlign.Center" >
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Usuario" Property="Email" Title="Email" Frozen="true" Width="160px" />
        <RadzenDataGridColumn TItem="Usuario" Property="Cpf" Title="CPF" Width="160px"/>
        <RadzenDataGridColumn TItem="Usuario"  Title="Ações" Width="160px" Sortable="false" Filterable="false">
        
        <Template Context="data">
            <RadzenButton Click=@(args => Editar(data.Id)) Text="Editar" Icon="edit" ButtonStyle="ButtonStyle.Warning"/>
            <RadzenButton Click=@(args => Deletar(data.Id)) Text="Excluir" Icon="delete" ButtonStyle="ButtonStyle.Danger"/>
     
        </Template>
        </RadzenDataGridColumn>

    </Columns>
</RadzenDataGrid>
</div>

@code {


    private List<Usuario> Usuarios = new();
    private void GoToForm()
    {
        Navigation.NavigateTo("/Admin/Usuario/Formulario/");

    }

    private async Task  Editar(int valueId)
    {
        Navigation.NavigateTo("/Admin/Usuario/Formulario/"+valueId);

    }

    private async Task Deletar(int valueId)
    {
        
        bool? result = await DialogService.ShowMessageBox(
            "Alerta",
            "O elemento deletado não pode ser recuperado! Tem certeza que deseja continuar?",
            yesText: "Sim!", cancelText: "Cancelar");

        if (result != null)
        {
            try
            {
                var data = await Context.Usuarios.Where(x => x.Id == valueId).FirstOrDefaultAsync();
                Context.Usuarios.Remove(data);
                await Context.SaveChangesAsync();
                NotificationMessage message = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Sucesso!",
                    Detail = "Deleção realizada com sucesso!",
                    Duration = 4000
                };
                NotificationService.Notify(message);

                QueryData();

            }
            catch (Exception e)
            {
                NotificationMessage message = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Atenção!",
                    Detail = e.Message,
                    Duration = 4000
                };
                NotificationService.Notify(message);
            }
        }

        StateHasChanged();

        
    }
    
    protected  override async Task OnInitializedAsync()
    {
        QueryData();
    }

    private void QueryData()
    {
        Usuarios = Context.Usuarios.ToList();
        
    }

}